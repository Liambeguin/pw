#!/bin/bash
# Copyright (C) 2015  Liam Beguin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Brief: Script used to control a digital loggers ethernet power switch.

idx=""
idx_outlet_names=""
idx_outlet_states=""
idx_switch_name=""
outlet=""

PROGNAME=${0##*/}
CONFFIILE="/home/$USER/.${PROGNAME}.conf"

die()     { printf "fatal: %s\n" "$*"; exit 1; }
verbose() { test -n "$VERBOSE" && printf "verbose: %s\n" "$*"; }
version() { git status >/dev/null 2>&1 && git describe; exit 0; }

set_default_options() {
	VERBOSE=""
	DELAY=""
}

# NOTE: tabs used to indent the usage text will not be displayed on the command
#       line. Use 4 spaces instead! (vim: `set list` can help here
usage() {
	cat <<- EOF
	Usage:
	    $(basename $0) [-v] [OPTION]

	DESCRIPTION
	    -v | verbose .......................... Enable verbose output
	    -h | help [-v] ........................ Display this message
	    [names | state | -s ] ................. Get the name and state of all outlets
	    [1-8 | all | name]  [on | off | ccl] .. Activate, Deactivate or powercycle outlets
	    [-d | delay] sec ...................... Set time to wait when power cycling
	    [-w | whois | state | names]  [0-8] ... Get the name of a specific outlet
	    rename  [1-8]  name ................... Rename an outlet
	EOF
	test -n "$verbose" && cat <<- EOF

	CONFIGURATION FILE
	    By default, pw will use ~/.pw.conf as a configuration file.
	    The configuration file contains three variable :
	    * USER
	    * PASSWORD
	    * POWER_SWITCH_IP

	    Creating a synlink of "pw" will allow you to use the same tool but with
	    a different configuration thus allowing you to control another power swith.
	EOF
	exit 0
}

check_cfg() {
	# TODO check if a system config file exists and use it
	# /etc/pw/
	if [ ! -r $CONFFIILE ]; then
		echo "Generating configuration file..."
		read -rp "Web power switch IP [192.168.0.100]: " ip
		ip=${ip:-"192.168.0.100"}
		read -rp "Web power switch username [admin]: " user
		user=${user:-"admin"}
		read -rsp "Web power switch password []: " psswd
		psswd=${psswd:-""}
		echo

		cat <<- EOF >"$CONFFIILE"
		# This file is used by the pw command
		# goto github.com/liambeguin/pw for more information
		USER="${user}"
		PASSWORD="${psswd}"
		POWER_SWITCH_IP="${ip}"
		EOF
		chmod 0600 $CONFFIILE
	else
		verbose "Configuration file is : $CONFFIILE"
	fi

	source $CONFFIILE
}

check_url() {
	URL="${USER}@${POWER_SWITCH_IP}"
	test -z "$USER" && USER="admin"
	test -n "$PASSWORD" && 	URL="${USER}:${PASSWORD}@${POWER_SWITCH_IP}"
}

get_index() {
	idx="$(curl -s ${URL}/index.htm)"
	idx_outlet_names=$(echo  "$idx" | sed -ne 's/^<td>\(.*\)<\/td><td>$/\1/p')
	idx_outlet_states=$(echo "$idx" | sed -ne 's/^.*>\(ON\|OFF\)<.*$/\1/p')
	idx_switch_name="$(echo  "$idx" | sed -ne 's/^<title>.* - \(.*\)<\/title>$/\1/p')"
}

sanitize_outlet_options() {
	outlet=$1
	state="${2^^}" # set to uppercase

	test -z "$(echo "$outlet" | grep -E '^[1-8]$|^all$')" &&
		outlet=$(echo "$idx_outlet_names" | cat -n | sed -ne 's/     \([1-8]\)\t'$1'/\1/p')

	test -z "$(echo "$outlet" | grep -E '^[1-8]$|^all$')" &&
		die "bad outlet number"
	test -z "$(echo "$state"  | grep -Eo '^(ON|OFF|CCL)$')" &&
		die "bad outlet state use 'on', 'off' or 'ccl'"

}

set_outlet_state() {
	sanitize_outlet_options "$1" "$2"

	verbose "${URL}/outlet?${outlet}=${state}"
	curl -s "${URL}/outlet?${outlet}=${state}" >/dev/null 2>&1
	verbose "Outlet $outlet was set to $state"

	exit 0
}

get_outlet_state() {
	echo "$idx_switch_name"
	for outlet in {1..8}; do
		echo -ne "  "
		echo -ne "$idx_outlet_names\n" | sed -n "${outlet}p" |\
			sed -e :a -e 's/^.\{1,25\}$/&./;ta;s/\./ /1' | tr '\n' ' '
		echo -ne "$outlet - "
		echo -ne "$idx_outlet_states\n" | sed -n "${outlet}p"
	done
}

set_outlet_name() {
	name="$2"

	sanitize_outlet_options "$1" ""
	test -n "$(echo $outlet | grep -Eo '^all$')" &&
		die "cannot use 'all' while renaming outlet"

	curl -s -G "${URL}/unitnames.cgi?data" \
		--data-urlencode "outname${outlet}=${name}" >/dev/null ||
		die "could not rename the outlet"
}

set_delay() {
	delay="$1"
	verbose "setting delay time to \"$delay\""
	#FIXME: This line will reset the entire "Delay" section...
	#       since I dont care that much about the other values,
	#		this is not an issue (for now)
	echo "WARN: Also setting: lockdel=3 relatch=0 refdelay=5 refresh=on"

	delay_args="lockdel=3&seqdelay=${delay}&relatch=0&refdelay=5&refresh=on"
	curl -s "${URL}/delay.cgi?${delay_args}&press=Submit" >/dev/null || \
		die "Could not set delay time ..."
}

# parse options
set_default_options
SHORTOPTS="hvVd:"
LONGOPTS="help,verbose,version,delay:"

ARGS=$(getopt -s bash --options $SHORTOPTS  \
    --longoptions $LONGOPTS --name "$PROGNAME" -- "$@" )

eval set -- "$ARGS"
while true; do
	case $1 in
		-h|--help)    CMD="help" ;;
		-v|--verbose) VERBOSE="yes" ;;
		-V|--version) version ;;
		-d|--delay) DELAY=$2; shift ;;
		--) shift; break ;;
		*)  shift; break ;;
	esac
	shift
done

check_cfg
check_url
get_index

# Parse command and execute
CMD="${CMD:-$1}"; shift

case "$CMD" in
	get) get_outlet_state "$1" ;;
	set) set_outlet_state "$1" "$2" ;;
	ccl) set_outlet_state "$1" ccl ;;
	rename) set_outlet_name "$1" "$2" ;;
	h|help) usage ;;
	*) die "Unknown '$CMD' command try --help" ;;
esac

exit 0
# vim: set cc=80 tw=100:
