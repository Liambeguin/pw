#!/bin/bash
# Copyright (C) 2015  Liam Beguin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Brief: Script used to control a digital loggers ethernet power switch.

idx_outlet_names=""
idx_outlet_states=""
idx_switch_name=""
outlet=""
name=""
forbidden_chars='[/]'
forbidden_names='[1-8]|all|switch'

PROGNAME=${0##*/}
WORKDIR="/tmp/$PROGNAME.$$"
IDX="$WORKDIR/index"
mkdir "$WORKDIR"

die()     { printf "fatal: %s\n" "$*"; exit 1; }
verbose() { test -n "$VERBOSE" && printf "verbose: %s\n" "$*"; }
version() { git status >/dev/null 2>&1 && git describe; exit 0; }

trap cleanup SIGHUP SIGINT SIGTERM EXIT
cleanup() {
	rm -r "$WORKDIR"
}

set_default_options() {
	VERBOSE=""
	DELAY=""
	CURL_OPTS="-s --connect-timeout 1"
	USER_CONF=""
}

# NOTE: tabs used to indent the usage text will not be displayed on the command
#       line. Use 4 spaces instead! (vim: `set list` can help here
usage() {
	cat <<- EOF
	Usage:
	    ${PROGNAME} [options] set <outlet> <state>
	    ${PROGNAME} [options] get [outlet]
	    ${PROGNAME} [options] <tgl|toggle> <outlet>
	    ${PROGNAME} [options] <rst|reset> <outlet>
	    ${PROGNAME} [options] [-d SEC|--delay=SEC] <ccl|cycle> <outlet>
	    ${PROGNAME} [options] rename <outlet> <name>
	    ${PROGNAME} -h | --help | --version | -R

	Options:
	    -V, --version           Show version and exit
	    -R, --revision          Show power switch versions and exit
	    -h, --help              Show this help message and exit
	    -v, --verbose           Print status messages
	    -c, --conffile          Set custom configuration file
	    -d SEC, --delay=SEC     Set number of seconds when power cycling

	Commands:
	    set                     Set <outlet> to <state>
	    get                     Get the state of the switch or of [outlet]
	    tgl                     Toggle state of <outlet>
	    ccl                     Power cycle <outlet>
	    reset                   Rename <outlet> name to the default value
	    rename                  Rename <outlet> to <name>. If <outlet> is 'switch'
	                            this will rename the switch.

	Arguments:
	    outlet                  outlet identifier can be number, name, or 'all'
	    state                   can be on, off, or ccl
	    name                    outlet name. Can be anything but '$forbidden_names'
	                            and cannot contain $forbidden_chars
	EOF

	test -n "$VERBOSE" && cat <<- EOF

	Configuration file:
	    By default, 'pw' looks for /etc/pw/pw.conf and ~/.pw.conf and uses
	    the first file found as its configuration. Since 'pw' looks for a file
	    based on '\$0', creating a symlink allows the user to command multiple
	    switches easily. If no file is found, 'pw' tries to create one in the
	    user's home directory. Note that this behaviour depends on the options
	    passed on the command line. The configuration file is a sourced by a shell
	    script and looks something like this:

	        # this is a config file
	        USER="yourusername"
	        PASSWORD="yourpassword"
	        POWER_SWITCH_IP="powerswitch.com"

	EOF
	exit 0
}

get_configuration() {
	test -n "$USER_CONF" &&
		{ test -r "$USER_CONF" || die "'$USER_CONF' file not found"; } &&
		source $USER_CONF && return 0

	# NOTE: the last element of this list should be writable to the user.
	#       If no file is found before the end of the for-loop, this function
	#       will try to create a config file in that place.
	for f in "/etc/pw/" "${HOME}/."; do
		CONFFIILE="${f}${PROGNAME}.conf"
		test -r "$CONFFIILE" && break
	done

	if [ ! -r "$CONFFIILE" ]; then
		echo "Generating configuration file..."
		read -rp "Web power switch IP [192.168.0.100]: " ip
		ip=${ip:-"192.168.0.100"}
		read -rp "Web power switch username [admin]: " user
		user=${user:-"admin"}
		read -rsp "Web power switch password []: " psswd
		psswd=${psswd:-""}
		echo

		cat <<- EOF >"$CONFFIILE"
		# This file is used by the pw command
		# goto github.com/liambeguin/pw for more information
		USER="${user}"
		PASSWORD="${psswd}"
		POWER_SWITCH_IP="${ip}"
		EOF
		chmod 0600 "$CONFFIILE"
	else
		verbose "Configuration file is : $CONFFIILE"
	fi

	source "$CONFFIILE"
}

check_url() {
	URL="${USER}@${POWER_SWITCH_IP}"
	test -z "$USER" && USER="admin"
	test -n "$PASSWORD" && 	URL="${USER}:${PASSWORD}@${POWER_SWITCH_IP}"
}

get_index() {
	curl ${CURL_OPTS} ${URL}/index.htm -o "$IDX" ||
		die "${POWER_SWITCH_IP} is unreachable"
	idx_outlet_names=$(sed -ne 's/^<td>\(.*\)<\/td><td>$/\1/p' "$IDX")
	idx_outlet_states=$(sed -ne 's/^.*>\(ON\|OFF\)<.*$/\1/p' "$IDX")
	idx_switch_name="$(sed -ne 's/^<title>.* - \(.*\)<\/title>$/\1/p' "$IDX")"
}

sanitize_outlet_options() {
	outlet="${1}"
	state="${2^^}" # set to uppercase
	name="${3}"

	# OUTLET
	test -z "$(echo "$outlet" | grep -E "^($forbidden_names)$")" &&
		outlet=$(echo "$idx_outlet_names" | cat -n | sed -ne 's/     \([1-8]\)\t'"$1"'/\1/p')
	test -z "$(echo "$outlet" | grep -E "^($forbidden_names)$")" &&
		die "bad outlet number"
	# STATE
	test -z "$(echo "$state"  | grep -Eo '^(ON|OFF|CCL)$')" &&
		die "bad outlet state use 'on', 'off' or 'ccl'"
	# NAME
	test -z "$name" && die "bad outlet name, cannot set empty name"
	test -n "$(echo "$name" | grep -Eo "${forbidden_chars}")" &&
		die "bad outlet name, using forbidden character: $forbidden_chars"
	test -n "$(echo "$name" | grep -E "^($forbidden_names)$")" &&
		die "bad outlet name, using forbidden name: $forbidden_names"

	if test "$name" = "-"; then
		name="Outlet $outlet"
		test "$outlet" = "switch" && name="Ethernet Power Controller";
	fi

	return 0
}

get_outlet_state() {
	if [ -z "$1" ]; then
		echo "$idx_switch_name"
		for outlet in {1..8}; do
			echo -ne "  "
			echo -ne "$idx_outlet_names\n" | sed -n "${outlet}p" |\
				sed -e :a -e 's/^.\{1,25\}$/&./;ta;s/\./ /1' | tr '\n' ' '
			echo -ne "$outlet - "
			echo -ne "$idx_outlet_states\n" | sed -n "${outlet}p"
		done
	else
		sanitize_outlet_options "$1" "off" "-" # $2 and $3 unused
		echo "$idx_outlet_states" | cat -n | sed -ne 's/     '$outlet'\t\(.*\)/\1/p'
	fi
	return 0
}

set_outlet_state() {
	sanitize_outlet_options "$1" "$2" "-"

	verbose "${URL}/outlet?${outlet}=${state}"
	curl ${CURL_OPTS} "${URL}/outlet?${outlet}=${state}" >/dev/null
	verbose "Outlet $outlet was set to $state"
	return 0
}

tgl_outlet_state() {
	local curr="$(get_outlet_state "$1")"

	if [ "$curr" == "ON" ]; then
		set_outlet_state "$1" "off"
	else
		set_outlet_state "$1" "on"
	fi
	return 0
}

ccl_outlet_state() {
	test -z "$DELAY" && set_outlet_state "$1" ccl && return 0

	local curr="$(get_outlet_state "$1")"
	tgl_outlet_state "$1"
	sleep $DELAY
	set_outlet_state "$1" "$curr"
	return 0
}

set_outlet_name() {
	sanitize_outlet_options "$1" "off" "$2" # state unused

	local data="outname${outlet}=${name}"
	test "$outlet" = "switch" && data="ctrlname=${name}"

	curl ${CURL_OPTS} -G "${URL}/unitnames.cgi?data" \
		--data-urlencode "$data" >/dev/null ||
		die "could not rename the outlet"
	return 0
}

set_delay() {
	delay="$1"
	verbose "setting delay time to \"$delay\""
	#FIXME: This line will reset the entire "Delay" section...
	#       since I dont care that much about the other values,
	#		this is not an issue (for now)
	echo "WARN: Also setting: lockdel=3 relatch=0 refdelay=5 refresh=on"

	delay_args="lockdel=3&seqdelay=${delay}&relatch=0&refdelay=5&refresh=on"
	curl ${CURL_OPTS} "${URL}/delay.cgi?${delay_args}&press=Submit" >/dev/null ||
		die "Could not set delay time ..."
}

# parse options
set_default_options
SHORTOPTS="hvVd:c:"
LONGOPTS="help,verbose,version,delay:conffile:"

ARGS=$(getopt -s bash --options $SHORTOPTS  \
    --longoptions $LONGOPTS --name "$PROGNAME" -- "$@" )

eval set -- "$ARGS"
while true; do
	case $1 in
		-h) CMD="help" ;;
		--help) CMD="help"; VERBOSE="yes" ;;
		-v|--verbose) VERBOSE="yes" ;;
		-V|--version) version ;;
		-d|--delay) DELAY=$2; shift ;;
		-c|--conffile) USER_CONF=$2; shift ;;
		--) shift; break ;;
		*)  shift; break ;;
	esac
	shift
done

get_configuration
check_url
get_index

# Parse command and execute
CMD="${CMD:-$1}"; shift

case "$CMD" in
	get) get_outlet_state "$1" ;;
	set) set_outlet_state "$1" "$2" ;;
	ccl|cycle)  ccl_outlet_state "$1" ;;
	tgl|toggle) tgl_outlet_state "$1" ;;
	rst|reset)  set_outlet_name "$1" "-" ;;
	rename) set_outlet_name "$1" "$2" ;;
	h|help) usage ;;
	*) die "Unknown '$CMD' command try --help" ;;
esac

exit 0
# vim: set cc=80 tw=100:
