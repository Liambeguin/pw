#!/bin/bash
# Copyright (C) 2015  Liam Beguin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Brief: Script used to control a digital loggers ethernet power switch.

conf_file="/home/$USER/.$(basename $0).conf"
# files sets:
# USER
# PASSWORD and
# POWER_SWITCH_IP

set_default_options() {
	VERBOSE=""
	DELAY=""
}

# NOTE: tabs used to indent the usage text will not be displayed on the command
#       line. Use 4 spaces instead! (vim: `set list` can help here
usage() {
	cat <<- EOF
	Usage:
	    $(basename $0) [-v] [OPTION]

	DESCRIPTION
	    -v | verbose .......................... Enable verbose output
	    -h | help [-v] ........................ Display this message
	    [names | state | -s ] ................. Get the name and state of all outlets
	    [1-8 | all | name]  [on | off | ccl] .. Activate, Deactivate or powercycle outlets
	    [-d | delay] sec ...................... Set time to wait when power cycling
	    [-w | whois | state | names]  [0-8] ... Get the name of a specific outlet
	    rename  [1-8]  name ................... Rename an outlet
	EOF
	test -n "$verbose" && cat <<- EOF

	CONFIGURATION FILE
	    By default, pw will use ~/.pw.conf as a configuration file.
	    The configuration file contains three variable :
	    * USER
	    * PASSWORD
	    * POWER_SWITCH_IP

	    Creating a synlink of "pw" will allow you to use the same tool but with
	    a different configuration thus allowing you to control another power swith.
	EOF
	exit 0
}

exit_err() {
	echo "ERROR: $@"
	exit 1
}

verbose() {
	if [ -n "$VERBOSE" ]; then
		echo "VERBOSE: $@"
	fi
}

check_cfg() {
	if [ ! -r $conf_file ]; then
		echo "Generating configuration file..."
		read -p "Web power switch IP (192.168.0.100) : " ip
		ip=${ip:-"192.168.0.100"}
		read -p "Web power switch username (admin) : " user
		user=${user:-"admin"}
		read -s -p "Web power switch password () : " psswd
		psswd=${psswd:-""}
		echo

		echo "# This file is used by the pw command to control a web power switch" > $conf_file
		echo "USER=\"${user}\"" >> $conf_file
		echo "PASSWORD=\"${psswd}\"" >> $conf_file
		echo "POWER_SWITCH_IP=\"${ip}\"" >> $conf_file
		chmod 0600 $conf_file
	else
		verbose "Configuration file is : $conf_file"
	fi

	source $conf_file
}

check_url() {
	if [ "$FORCE" != "yes" ]; then
		verbose "Attempting to ping ..."
		ping -c1 -W1 $POWER_SWITCH_IP 2>&1 > /dev/null
		if [ $? != 0 ]; then
			exit_err "cannot access remote power switch ip [$POWER_SWITCH_IP]"
		fi
	fi

	if [ -z "$USER" ]; then
		verbose "No remote ID given, using default..."
		USER="admin"
	fi

	if [ -n "$PASSWORD" ]; then
		URL="${USER}:${PASSWORD}@${POWER_SWITCH_IP}/"
	else
		verbose "No password was set"
		URL="${USER}@${POWER_SWITCH_IP}/"
	fi

	verbose "URL is : $URL"
}

set_outlet_state() {
	outlet="$(echo $1 | grep -Eo '^[1-8]|all')"
	if [ -z "$outlet" ]; then
		exit_err "Bad outlet number"
	fi
	state="$(echo $2 | tr '[:lower:]' '[:upper:]' | grep -Eo 'ON|OFF|CCL')"
	if [ -z "$state" ]; then
		exit_err "bad outlet state use 'on', 'off' or 'ccl'"
	fi

	verbose "${URL}outlet?${outlet}=${state}"
	curl -s "${URL}outlet?${outlet}=${state}" > /dev/null 2>&1
	verbose "Outlet $outlet was set to $state"

	exit 0
}

get_outlet_state() {
	verbose "Reding url -s ${URL}index.htm"
	echo
	page="$(curl -s ${URL}index.htm)"
	names=$(echo "$page" | grep -E '<td>.*</td><td>' | sed -e 's#<td>\|</td>##g')
	states=$(echo "$page" | grep -Eo '>ON<|>OFF<' | sed 's/<\|>//g')
	for outlet in $(seq 1 1 8); do
		echo -ne "  "
		echo -ne "$names\n" | sed -n "${outlet}p" |\
			sed -e :a -e 's/^.\{1,20\}$/&./;ta;s/\./ /1' | tr '\n' ' '
		echo -ne "$outlet-"
		echo -ne "$states\n" | sed -n "${outlet}p"
	done
	echo
}

set_outlet_name() {
	outlet="$(echo $1 | grep -o '[1-8]')"
	if [ -z "$outlet" ]; then
		exit_err "Bad outlet number ..."
	fi
	name="$2"
	verbose "new name is \"$name\""
	curl -s -G "${URL}unitnames.cgi?data" --data-urlencode "outname${outlet}=${name}" > /dev/null \
		|| exit_err "Could not rename the outlet..."
	verbose "Renamed outlet $outlet to : $2"
}

set_delay() {
	delay="$1"
	verbose "setting delay time to \"$delay\""
	#FIXME: This line will reset the entire "Delay" section...
	#       since I dont care that much about the other values,
	#		this is not an issue (for now)
	echo "WARN: Also setting: lockdel=3 relatch=0 refdelay=5 refresh=on"

	delay_args="lockdel=3&seqdelay=${delay}&relatch=0&refdelay=5&refresh=on"
	curl -s "${URL}delay.cgi?${delay_args}&press=Submit" > /dev/null || \
		exit_err "Could not set delay time ..."
}

# parse options
set_default_options
SHORTOPTS="hvVd:"
LONGOPTS="help,verbose,version,delay:"

ARGS=$(getopt -s bash --options $SHORTOPTS  \
    --longoptions $LONGOPTS --name "$PROGNAME" -- "$@" )

eval set -- "$ARGS"
while true; do
	case $1 in
		-h|--help)    CMD="help" ;;
		-v|--verbose) VERBOSE="yes" ;;
		-V|--version) version ;;
		-d|--delay) DELAY=$2; shift ;;
		--) shift; break ;;
		*)  shift; break ;;
	esac
	shift
done

check_cfg
check_url

# Parse command and execute
CMD="${CMD:-$1}"; shift

case "$CMD" in
	get) get_outlet_state "$1" ;;
	set) set_outlet_state "$1" "$2" ;;
	ccl) set_outlet_state "$1" ccl ;;
	rename) set_outlet_name "$1" "$2" ;;
	h|help) usage ;;
	*)      printf "%s: Unknown command try --help\n" "$CMD"; exit 1;;
esac

exit 0
# vim: set cc=80 tw=100:
