#!/bin/bash
# Copyright (C) 2015  Liam Beguin
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Brief: Script used to control a digital loggers ethernet power switch.

verbose=""
force="yes"
conf_file="/home/$USER/.$(basename $0).conf"
# files sets:
# USER
# PASSWORD and
# POWER_SWITCH_IP

usage() {
	if [ -n "$verbose" ]; then
		cat << EOF

USAGE
	$(basename $0) [-v] [OPTION]

DESCRIPTION
	-v | verbose .......................... Enable verbose output
	-h | help [-v] ........................ Display this message
	[names | state | -s ] ................. Get the name and state of all outlets
	[1-8 | all | name]  [on | off | ccl] .. Activate, Deactivate or powercycle outlets
	[-d | delay] sec ...................... Set time to wait when power cycling
	[-w | whois | state | names]  [0-8] ... Get the name of a specific outlet
	rename  [1-8]  name ................... Rename an outlet

CONFIGURATION FILE
	By default, pw will use ~/.pw.conf as a configuration file.
	The configuration file contains three variable :
	   * USER
	   * PASSWORD
	   * POWER_SWITCH_IP

	Creating a synlink of "pw" will allow you to use the same tool but with
	a different configuration thus allowing you to control another power swith.

EOF
	else
		cat << EOF

USAGE
	$(basename $0) [-v] [OPTION]

DESCRIPTION
	-v | verbose .......................... Enable verbose output
	-h | help [-v] ........................ Display this message
	[names | state | -s ] ................. Get the name and state of all outlets
	[1-8 | all | name]  [on | off | ccl] .. Activate, Deactivate or powercycle outlets
	[-d | delay] sec ...................... Set time to wait when power cycling
	[-w | whois | state | names]  [0-8] ... Get the name of a specific outlet
	rename  [1-8]  name ................... Rename an outlet

EOF
	fi

	exit 0
}

exit_err() {
	echo "ERROR: $@"
	exit 1
}

verbose() {
	if [ -n "$verbose" ]; then
		echo "VERBOSE: $@"
	fi
}

check_cfg() {
	if [ ! -r $conf_file ]; then
		echo "Generating configuration file..."
		read -p "Web power switch IP (192.168.0.100) : " ip
		ip=${ip:-"192.168.0.100"}
		read -p "Web power switch username (admin) : " user
		user=${user:-"admin"}
		read -s -p "Web power switch password () : " psswd
		psswd=${psswd:-""}

		echo "# This file is used by the pw command to control a web power switch" > $conf_file
		echo "USER=\"${user}\"" >> $conf_file
		echo "PASSWORD=\"${psswd}\"" >> $conf_file
		echo "POWER_SWITCH_IP=\"${ip}\"" >> $conf_file
	else
		verbose "Configuration file is : $conf_file"
	fi

	source $conf_file
}

check_url() {
	if [ "$force" != "yes" ]; then
		verbose "Attempting to ping ..."
		ping -c1 -W1 $POWER_SWITCH_IP 2>&1 > /dev/null
		if [ $? != 0 ]; then
			exit_err "cannot access remote power switch ip [$POWER_SWITCH_IP]"
		fi
	fi

	if [ -z "$USER" ]; then
		verbose "No remote ID given, using default..."
		USER="admin"
	fi

	if [ -n "$PASSWORD" ]; then
		URL="${USER}:${PASSWORD}@${POWER_SWITCH_IP}/"
	else
		verbose "No password was set"
		URL="${USER}@${POWER_SWITCH_IP}/"
	fi

	verbose "URL is : $URL"
}

set_outlet() {
	outlet="$(echo $1 | grep -Eo '^[1-8]|all')"
	if [ -z "$outlet" ]; then
		exit_err "Bad outlet number"
	fi
	state="$(echo $2 | tr '[:lower:]' '[:upper:]' | grep -Eo 'ON|OFF|CCL')"
	if [ -z "$state" ]; then
		exit_err "bad outlet state use 'on', 'off' or 'ccl'"
	fi

	verbose "${URL}outlet?${outlet}=${state}"
	curl -s "${URL}outlet?${outlet}=${state}" > /dev/null 2>&1
	verbose "Outlet $outlet was set to $state"

	exit 0
}

get_state() {
	verbose "Reding url -s ${URL}index.htm"
	echo
	page="$(curl -s ${URL}index.htm)"
	names=$(echo "$page" | grep -E '<td>.*</td><td>' | sed -e 's#<td>\|</td>##g')
	states=$(echo "$page" | grep -Eo '>ON<|>OFF<' | sed 's/<\|>//g')
	for outlet in $(seq 1 1 8); do
		echo -ne "  "
		echo -ne "$names\n" | sed -n "${outlet}p" |\
			sed -e :a -e 's/^.\{1,20\}$/&./;ta;s/\./ /1' | tr '\n' ' '
		echo -ne "$outlet-"
		echo -ne "$states\n" | sed -n "${outlet}p"
	done
	echo
}

set_name() {
	outlet="$(echo $1 | grep -o '[1-8]')"
	if [ -z "$outlet" ]; then
		exit_err "Bad outlet number ..."
	fi
	name="$2"
	verbose "new name is \"$name\""
	curl -s -G "${URL}unitnames.cgi?data" --data-urlencode "outname${outlet}=${name}" > /dev/null \
		|| exit_err "Could not rename the outlet..."
	verbose "Renamed outlet $outlet to : $2"
}

set_delay() {
	delay="$1"
	verbose "setting delay time to \"$delay\""
	#FIXME: This line will reset the entire "Delay" section...
	#       since I dont care that much about the other values,
	#		this is not an issue (for now)
	echo "WARN: Also setting: lockdel=3 relatch=0 refdelay=5 refresh=on"

	delay_args="lockdel=3&seqdelay=${delay}&relatch=0&refdelay=5&refresh=on"
	curl -s "${URL}delay.cgi?${delay_args}&press=Submit" > /dev/null || \
		exit_err "Could not set delay time ..."
}

## STARTS HERE

# The following section is a bit messy but allows to have names with spaces...
args=( "$@" )
if [ -n "$(echo $@ | grep -Eo "verbose|-v")" ]; then
	verbose="yes"
	args=( "${args[@]/\-v/}" )
	args=( "${args[@]/verbose/}" )
	#args=( "$(echo $@ | sed -e 's/-v\|verbose//g')" )
fi
for i in $(seq 0 1 $# ); do
	if [ -n "${args[$i]}" ]; then
		args[$i]=\"${args[$i]}\"
	fi
done

eval set -- "${args[@]}"

check_cfg
check_url

verbose "case is $#"
case $# in
	1)
		case $1 in
			-h|help|--help)
				usage
				;;
			-s|state|names)
				get_state
				;;
			*)
				exit_err "Unknown argument, try \"$(basename $0) help\""
				;;
		esac
		;;
	2)
		case $1 in
			[1-8]|all)
				set_outlet $1 $2
				;;
			-w|whois|state|names)
				if [ -n "$(echo $2 | grep -o '^[1-8]')" ]; then
					get_state | sed -n "${2}p"
				else
					exit_err "bad outlet number !"
				fi
				;;
			-d|delay)
				if [ "$2" -lt 3600 ] && [ "$2" -gt 1 ]; then
					set_delay $2
				else
					exit_err "Bad delay value 1 < seconds < 3600"
				fi
				;;
			*)
				if [ -n "$(echo $2 | grep -iE "on|off|ccl")" ]; then
					outlet_number="$(get_state | grep -i "$1" | grep -o '[1-8]-' | grep -o '[1-8]')"
					if [ -n "$outlet_number" ]; then
						set_outlet $outlet_number $2
					else
						exit_err "Bad outlet name: \"$1\" not found try \"$(basename $0) names\""
					fi
				else
					exit_err "Unknown argument, try \"$(basename $0) help\""
				fi
				;;
			esac
			;;
	3)
		case $1 in
			-r|rename)
				if [ -n "$(echo $2 | grep -o '^[1-8]')" ]; then
					set_name "$2" "$3"
				else
					exit_err "bad outlet number !"
				fi
				;;
			*)
				exit_err "Unknown argument, try \"$(basename $0) help\""
				;;
		esac
		;;
	*)
		exit_err "Unknown argument, try \"$(basename $0) help\""
		;;
esac

# vim: set cc=80 tw=100:
